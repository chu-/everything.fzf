#!/usr/bin/env ruby
# frozen_string_literal: true

# MIT License
#
# Copyright (c) 2025 Junegunn Choi
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'json'
require 'shellwords'
require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'unicode-display_width', require: 'unicode/display_width'
end

FZF = <<~'CMD'
  fzf --style full --header-border none --reverse \
      --list-label ' Loading applications ... ' --list-label-pos 4 \
      --bind 'load:change-list-label:' \
      --header-lines 1 \
      --multi \
      --with-nth ..4 --delimiter "\t" --tabstop 1
CMD

columns = %i[
  name
  version
  from
  modified
  path
]

IO.popen(FZF, 'r+') do |io|
  json = JSON.parse(`system_profiler SPApplicationsDataType -json`, symbolize_names: true)
  items = json.first.last.map do |app|
    app.values_at(:_name, :version, :obtained_from, :lastModified, :path)
       .map { it.to_s.lines.map(&:chomp).join(' ') }
  end
  items = [columns] + items.sort_by(&:first)
  lengths = items.transpose.map do |cols|
    cols.map { Unicode::DisplayWidth.of(it.to_s) }.max
  end
  aligned = items.map do |item|
    item.map.with_index do |col, i|
      pad = lengths[i] - Unicode::DisplayWidth.of(col.to_s)
      col.to_s + ' ' * pad
    end.join("\t")
  end
  io.puts(aligned)
  io.close_write

  loop do
    line = io.gets or break
    path = line.strip.split("\t").last
    system "open #{path.shellescape}"
  end
end
