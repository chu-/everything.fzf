#!/usr/bin/env ruby
# frozen_string_literal: true

# MIT License
#
# Copyright (c) 2025 Junegunn Choi
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

require 'open3'
require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'sqlite3'
  gem 'ansi256'
end

DB = File.expand_path('~/Library/Containers/org.p0deje.Maccy/Data/Library/Application Support/Maccy/Storage.sqlite')

SQL = <<~'SQL'
  select   distinct ZVALUE
  from     ZHISTORYITEMCONTENT
  where    ZTYPE IN ('public.text', 'public.utf8-plain-text')
  order by Z_PK desc
SQL

FZF = <<~'CMD'
  fzf --no-height --tmux 100% --reverse --gap --read0 --highlight-line --wrap \
      --style full --header-border none \
      --header 'Press CTRL-E to edit it in the editor' \
      --bind 'enter:become:echo -n {} | pbcopy' \
      --bind 'ctrl-e:become:temp=$(mktemp); echo -n {} > "$temp"; "${EDITOR:-vim}" "$temp" > /dev/tty; pbcopy < "$temp"; rm -f "$temp"' \
CMD

unless File.exist?(DB)
  warn 'Maccy database not found.'
  exit 1
end

IO.popen(FZF, 'r+') do |io|
  SQLite3::Database.open(DB) do |db|
    db.execute(SQL).each do |row|
      io.print row.first
      io.print "\x0"
    end
  end
end
